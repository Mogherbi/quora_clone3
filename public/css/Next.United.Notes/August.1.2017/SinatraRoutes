Sinatra Routes Readme
By FlatIron School of New York

https://learn.co/lessons/sinatra-routes-readme

OVERVIEW
In this lesson, we'll explore routes and how they direct users to different parts of your website

    --OBJECTIVES--

-Define routes as the part of an application that connects HTTP requests to a specific method in your application code

-Construct a route by matching an HTTP method/verb, like GET or POST with a URL-matching pattern

-Explain the syntax of routes as Ruby methods that are called with arguments and blocks

WHAT ARE ROUTES?
Every time a person clicks on a link, types in a URL, or submits a form, they are making HTTP requests to a specific URL on your application. Routes are the part of an application that connect HTTP requests to a specific method in your application code built to handle responding to such a request (that part of code is called a Controller Action).

Users interact with our application by requesting specific URLs via HTTP. URLs are the interface to a web application.
How does our application know what to show a user based on the web request they sent? Through the routes we program in our application. Being able to draw a route in a web application to respond to an HTTP request is the absolute first step in building anything on the web.
In Sinatra, a route is constructed by pairing an HTTP method/verb, like GET or POST with a URL-matching pattern, i.e. a string that matches what users type in to their browser when they want to visit our webpage. We'll see an example in just a moment.


HOW DO ROUTES WORK?
Routes match the web request sent by a client to some code in our application that tells the app what data and templates to send back to the client.
Let's go into more detail on our two routes, /medicines and /patients, from the example application above.
When our doctor types into the browser, http://localhost:9393/medicines, our application gets a request: GET /medicines.
Our Sinatra application will match this request to a route that is defined in a controller.
The matching route defined in the controller would look like this:

get '/medicines' do
    # some code to get all the medicines
    # some code to render the correct HTML page
 end

 Once the request has been matched to the route in the controller, called the controller action, then it executes the code inside of the controller action's block, as shown below:

 # medicines_controller.rb

get '/medicines' do
  @medicines = Medicine.all

  erb :'medicines/index.html.erb'
end


ADVANCED!!!:
 You might be wondering what this line does for us: erb :'/medicines/index.html.erb. We'll learn much more about ERB soon. For now, all you need to know is that that line of code identifies a file that contains a combination of HTML and Ruby code and sends it back to the client to be rendered in the browser.

 Let's run through this specific scenario.
The HTTP request verb, GET matches the get method in our controller. The /medicines path in the HTTP request matches the /medicines path in our controller method. Yay! We've successfully matched the request to a controller action!
Once our app has found its match, it will run the code in the block that accompanies the route. In this case, the block will query the Medicine table for all of its medicines. The collection of Medicine instances that such a query returns is stored in the variable @medicines.
Finally, the @medicines collection of objects is rendered via the index.html.erb file: views/medicines/index.html.erb. This file is the HTML (+ some Ruby code––more on that later) that we want our users to see when they request to see all of the medicines. The HTML returned from the template is sent by the controller action as a response to the user.
If no matching route for the web request is found, our application will respond with a 404 informing the user's browser that our application cannot find a match for that request URL.

----BREAKING DOWN ROUTE DEFINITION----
Now that we know how routes work, let's take a closer look at their syntax.
Sinatra is what is known as a Domain Specific Language, or DSL. A DSL is a specialized, situation-specific language. Sinatra was built expressly for the purpose of creating web applications with Ruby. It is written with Ruby and the code we'll be using to build our Sinatra apps is Ruby code.

The route below:

get '/medicines' do
    # some code to get the medicines and render the correct HTML file
end

is actually a plain old-fashioned Ruby method that is getting called with an argument and a block.
Here, the get method is called with an argument of '/medicines' and is being invoked with a block (the code between the do/end keywords.
Here's another way to write it that might look familiar:

get('/medicines') { some code }

The get , or the post, or delete methods for that matter, will be invoked if Sinatra matches the HTTP method (GET, POST, etc) and the URL, in this case '/medicines', to a route defined in the controller.

****  The above was pulled from :
 https://learn.co/lessons/sinatra-routes-readme

 WHAT IS A RESTFUL ROUTE?
 The internet would be a really confusing place without a convention for how to handle URLS - to delete a Facebook post might be www.facebook.com/delete-this-wallpost, but Twitter might be www.twitter.com/remove-this-tweet. Without a specific convention to follow, it would be hard to create new content, edit content, and delete it. RESTful routes provides a design pattern that allows for easy data manipulation. It's nicer for users and nicer for developers to have everything consistent.
 A RESTful route is a route that provides mapping between HTTP verbs (get, post, put, delete, patch) to controller CRUD actions (create, read, update, delete). Instead of relying solely on the URL to indicate what site to visit, a RESTful route also depends on the HTTP verb and the URL.
 What this means is that when your application receives an HTTP request, it introspects on that request and identifies the HTTP method and URL, connects that with a corresponding controller action that has that method and URL, executes the code in that action, and determines which response gets sent back to the client. We don't need to worry about how the mechanics of the pattern matching occurs, just that it does happen.
 It's important to note that much of the CRUD actions are different actions that occur on the same resource. Let's take the example of a blog post with the ID 4. If we wanted to view the post, we would make a GET request to /posts/4. But what about when I want to update that post? Am I hitting a different resource? Nope! Just doing a different action to that same resource. So instead of a GET against post/4 we do a PUT. That's why separating what you're talking to (the resource/noun) from the action you're doing (the HTTP verb) is important! That's key to REST.
